# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Build and test package

on:
  push:
    branches:
      - master # Trigger on pushes to master branch
  pull_request:
    branches:
      - "**" # Trigger on PRs of ANY branch

concurrency:
  # Assigns this GitHub workflow a name so that in-progress instances of this
  # workflow will be cancelled if a new push is made
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # Create a test matrix that alternates the installation of NumPy v1 and v2
  # in a checkerboard pattern on the OSes being tested
  generate-test-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Generate test matrix
        id: set-matrix
        shell: python
        run: |
          import json, os

          os_list_a = ["ubuntu-24.04", "macos-14"]
          os_list_b = ["windows-2022", "windows-2025"]
          py_versions = ["3.9", "3.10", "3.11", "3.12"]

          matrix = []

          for os_name in os_list_a:
              for i, py in enumerate(py_versions):
                  numpy = "<2,>=1" if i % 2 == 0 else ">=2,<3"
                  matrix.append({
                      "os": os_name,
                      "python-version": py,
                      "numpy-version": numpy
                  })

          for os_name in os_list_b:
              for i, py in enumerate(py_versions):
                  numpy = ">=2,<3" if i % 2 == 0 else "<2,>=1"
                  matrix.append({
                      "os": os_name,
                      "python-version": py,
                      "numpy-version": numpy
                  })

          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              json_data = json.dumps({"include": matrix})
              fh.write(f"matrix={json_data}\n")

  build-and-test:
    # Load the test matrix generated for use here
    needs: generate-test-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: False
      matrix: ${{ fromJson(needs.generate-test-matrix.outputs.matrix) }}

    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }} - NumPy ${{ matrix.numpy-version }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Cairo library (Ubuntu only)
        # Cairo library needs to be manually installed on Ubuntu in order for
        # pyCairo to be installed
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y libcairo2-dev

      - name: Disable OpenCL for pyFAI and silx (MacOS only)
        # There is currently an error with getting device IDs in pyOpenCL on MacOS
        # $ pyopencl._cl.LogicError: clGetDeviceIDs failed: INVALID_VALUE
        # Disabling the use of OpenCL seems to work for now
        if: runner.os == 'macOS'
        run: |
          echo "PYFAI_NO_OPENCL=1" >> $GITHUB_ENV
          echo "SILX_OPENCL=0" >> $GITHUB_ENV

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install 'numpy${{ matrix.numpy-version }}'
          python -m pip install .[dev]

      - name: Run 'pytest' tests
        run: |
          pytest
